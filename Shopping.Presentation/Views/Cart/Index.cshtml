<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>

    @* Loader *@

    <style>

        .cube-loader {
            position: relative;
            /* u can choose any size */
            width: 75px;
            height: 75px;
            transform-style: preserve-3d;
            transform: rotateX(-30deg);
            animation: animate 4s linear infinite;
        }

        @@keyframes animate {
            0% {
                transform: rotateX(-30deg) rotateY(0);
            }

            100% {
                transform: rotateX(-30deg) rotateY(360deg);
            }
        }

        .cube-loader .cube-wrapper {
            position: absolute;
            width: 100%;
            height: 100%;
            /* top: 0;
          left: 0; */
            transform-style: preserve-3d;
        }

            .cube-loader .cube-wrapper .cube-span {
                position: absolute;
                width: 100%;
                height: 100%;
                /* top: 0;
          left: 0; */
                /* width 75px / 2 = 37.5px */
                transform: rotateY(calc(90deg * var(--i))) translateZ(37.5px);
                background: linear-gradient( to bottom, hsl(330, 3.13%, 25.1%) 0%, hsl(177.27, 21.71%, 32.06%) 5.5%, hsl(176.67, 34.1%, 36.88%) 12.1%, hsl(176.61, 42.28%, 40.7%) 19.6%, hsl(176.63, 48.32%, 43.88%) 27.9%, hsl(176.66, 53.07%, 46.58%) 36.6%, hsl(176.7, 56.94%, 48.91%) 45.6%, hsl(176.74, 62.39%, 50.91%) 54.6%, hsl(176.77, 69.86%, 52.62%) 63.4%, hsl(176.8, 76.78%, 54.08%) 71.7%, hsl(176.83, 83.02%, 55.29%) 79.4%, hsl(176.85, 88.44%, 56.28%) 86.2%, hsl(176.86, 92.9%, 57.04%) 91.9%, hsl(176.88, 96.24%, 57.59%) 96.3%, hsl(176.88, 98.34%, 57.93%) 99%, hsl(176.89, 99.07%, 58.04%) 100% );
            }

        .cube-top {
            position: absolute;
            width: 75px;
            height: 75px;
            background: hsl(330, 3.13%, 25.1%) 0%;
            /* width 75px / 2 = 37.5px */
            transform: rotateX(90deg) translateZ(37.5px);
            transform-style: preserve-3d;
        }

            .cube-top::before {
                content: '';
                position: absolute;
                /* u can choose any size */
                width: 75px;
                height: 75px;
                background: hsl(176.61, 42.28%, 40.7%) 19.6%;
                transform: translateZ(-90px);
                filter: blur(10px);
                box-shadow: 0 0 10px #323232, 0 0 20px hsl(176.61, 42.28%, 40.7%) 19.6%, 0 0 30px #323232, 0 0 40px hsl(176.61, 42.28%, 40.7%) 19.6%;
            }

    </style>

</head>
<body>

    <main role="main">
        <div class="Cart_Section">
            <div class="Cart_Main_Area">
                <div class="container">
                    <form style="position: relative">
                        <h2>Cart</h2>

                        <div class="cube-loader" style="position: absolute; top: 40%; left: 45%;">
                            <div class="cube-top"></div>
                            <div class="cube-wrapper">
                                <span style="--i:0" class="cube-span"></span>
                                <span style="--i:1" class="cube-span"></span>
                                <span style="--i:2" class="cube-span"></span>
                                <span style="--i:3" class="cube-span"></span>
                            </div>
                        </div>

                        <div class="Row">
                            <div class="Col">

                                <div class="Table-Content">
                                    <table>

                                        <thead>
                                            <tr>
                                                <th class="Image" id="pro-header">Image</th>
                                                <th class="Product" id="pro-header">Product</th>
                                                <th class="Price" id="pro-header">Price</th>
                                                <th class="Quantity" id="pro-header">Quantity</th>
                                                <th class="Total" id="pro-header">Total</th>
                                                <th class="Remove" id="pro-header">Remove</th>
                                            </tr>
                                        </thead>

                                        <tbody>

                                        </tbody>

                                    </table>
                                </div>

                                <div class="Row">
                                    <div class="Col">
                                        <div class="Cart-Totals">
                                            <h2>Cart Totals</h2>
                                            <br />
                                            <table>
                                                <tbody>
                                                    <tr id="total">
                                                        <th>Total</th>
                                                        <td>
                                                            <span id="amount">
                                                                <span id="money"></span>
                                                            </span>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <div class="Proceed-To-Checkout">
                                                <button class="Checkout-Btn"> Proceed To Checkout </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>

    @* loader *@

     <script>

        const loaderElement = document.querySelector(".cube-loader");

        function showLoader(show) {
            loaderElement.style.display = show ? "block" : "none";
        }

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            showLoader(true);

            const cartItems = JSON.parse(localStorage.getItem('cart'));

            const tbody = document.querySelector('tbody');

            updateTotalAmount(cartItems);

            if (cartItems.length > 0) {
                cartItems.forEach(item => {
                    const row = document.createElement('tr');
                    row.style.height = "auto";

                    const imageCell = document.createElement('td');
                    const productCell = document.createElement('td');
                    const priceCell = document.createElement('td');
                    const quantityCell = document.createElement('td');
                    const totalCell = document.createElement('td');
                    const removeCell = document.createElement('td');

                    imageCell.innerHTML = `<img style="width: 100px;" src="${item.imageUrl}" />`;
                    productCell.textContent = item.name;
                    priceCell.textContent = `$${item.price}`;

                    //#region Quantity html

                    const quantityInput = document.createElement('input');
                    quantityInput.type = 'number';
                    quantityInput.value = item.quantity;
                    quantityInput.min = 1;
                    quantityInput.classList.add('quantity-input');

                    const decBtn = document.createElement('span');
                    decBtn.textContent = '-';
                    decBtn.classList.add('dec', 'qtybtn');
                    decBtn.style.cursor = "pointer";
                    decBtn.style.fontSize = "24px"; 

                    const incBtn = document.createElement('span');
                    incBtn.textContent = '+';
                    incBtn.classList.add('inc', 'qtybtn');
                    incBtn.style.cursor = "pointer";
                    incBtn.style.fontSize = "24px"; 


                    const quantityWrapper = document.createElement('div');
                    quantityWrapper.id = 'quantity';
                    quantityWrapper.appendChild(decBtn);
                    quantityWrapper.appendChild(quantityInput);
                    quantityWrapper.appendChild(incBtn);

                    quantityCell.appendChild(quantityWrapper);

                    //#endregion

                    totalCell.textContent = `$${item.price * item.quantity}`;
                    removeCell.innerHTML = `<a href="#" class="remove-item">Remove</a>`;

                    removeCell.querySelector('.remove-item').addEventListener('click', (e) => {
                        e.preventDefault();
                        const index = cartItems.findIndex(cartItem => cartItem.id === item.id);

                        if (index !== -1) {
                            cartItems.splice(index, 1);

                            localStorage.setItem('cart', JSON.stringify(cartItems));

                            row.remove();

                            updateItemCount(cartItems.reduce((total, item) => total + item.quantity, 0));
                            updateTotalAmount(cartItems);
                            //updateTotalCount();
                        }
                    });

                    row.appendChild(imageCell);
                    row.appendChild(productCell);
                    row.appendChild(priceCell);
                    row.appendChild(quantityCell);
                    row.appendChild(totalCell);
                    row.appendChild(removeCell);

                    //#region Quantity script

                    incBtn.addEventListener('click', () => {
                        quantityInput.value = parseInt(quantityInput.value) + 1;

                        updateTotal();
                        updateQuantity(item.id, parseInt(quantityInput.value));
                    });

                    decBtn.addEventListener('click', () => {
                        const newValue = Math.max(parseInt(quantityInput.value) - 1, 1);
                        quantityInput.value = newValue;

                        updateTotal();
                        updateQuantity(item.id, newValue);
                    });

                    quantityInput.addEventListener('input', updateQuantityHandler);
                    quantityInput.addEventListener('change', updateTotalAmountHandler);

                    function updateQuantityHandler() {
                        updateTotal();
                        updateQuantity(item.id, parseInt(quantityInput.value));
                    }

                    function updateTotalAmountHandler() {
                        updateTotalAmount(cartItems);
                    }

                    //#endregion

                    function updateTotal() {
                        const quantity = parseInt(quantityInput.value) || 0;
                        totalCell.textContent = `$${item.price * quantity}`;
                    }

                    tbody.appendChild(row);
                });

            } else {
                const emptyMessage = document.createElement('h1');
                emptyMessage.textContent = "Your Cart Is Currently Empty";
                tbody.append(emptyMessage);
            }

            updateItemCount(cartItems.reduce((total, item) => total + item.quantity, 0));

            showLoader(false);
        });

        function updateQuantity(productId, newQuantity) {
            const cartItems = JSON.parse(localStorage.getItem('cart')) || [];

            const updatedItems = cartItems.map(item => {
                if (item.id === productId) {
                    item.quantity = newQuantity;
                    item.total = item.price * newQuantity;
                }
                return item;
            });

            localStorage.setItem('cart', JSON.stringify(updatedItems));
            updateItemCount(updatedItems.reduce((total, item) => total + item.quantity, 0)); // Using updatedItems instead of cart because updated items are filtered
            updateTotalAmount(updatedItems);

        }

        function updateItemCount(count) {
            const itemCountElement = document.getElementById('ItemCount');

            if (itemCountElement) {
                itemCountElement.textContent = count;
            }

            localStorage.setItem('itemCount', count);
        }

        function getCartItemCount() {
            const cart = JSON.parse(localStorage.getItem('cart')) || [];
            return cart.reduce((total, item) => total + item.quantity, 0);
        }

        function updateTotalAmount(cartItems) {
            let totalAmount = 0;

            if (cartItems.length > 0) {
                cartItems.forEach(item => {
                    totalAmount += item.price * item.quantity;
                });
            }

            const totalAmountElement = document.getElementById('money');
            if (totalAmountElement) {
                totalAmountElement.textContent = `$${totalAmount.toFixed(2)}`; //to .00 's
            }
        }

    </script>

</body>
</html>