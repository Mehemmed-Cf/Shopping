<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link rel="stylesheet" href="../../sass/main.css" />

    <!-- Google -->

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet">

    <!-- internal -->
    <script defer src="../../common/functions/navigation.js"></script>
    <script defer src="../../common/functions/index.js"></script>

</head>
<body>

    <main role="main">
        <div class="Cart_Section">
            <div class="Cart_Main_Area">
                <div class="container">
                    <form>
                        <h2>Cart</h2>
                        <div class="Row">
                            <div class="Col">

                                <div class="Table-Content">
                                    <table>

                                        <thead>
                                            <tr>
                                                <th class="Image" id="pro-header">Image</th>
                                                <th class="Product" id="pro-header">Product</th>
                                                <th class="Price" id="pro-header">Price</th>
                                                <th class="Quantity" id="pro-header">Quantity</th>
                                                <th class="Total" id="pro-header">Total</th>
                                                <th class="Remove" id="pro-header">Remove</th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            <tr>
@*                                                 <td class="Pro-Image">
                                                    <a>
                                                        <img src="../../assets/images/HD_TV.webp" />
                                                    </a>
                                                </td>
                                                <td class="Pro-Title">
                                                    <a>dolore magnam aliquam - xl</a>
                                                </td>
                                                <td class="Pro-Price">
                                                    <span>
                                                        <span id="amount">
                                                            <span id="money">$100.00</span>
                                                        </span>
                                                    </span>
                                                </td>
                                                <td class="Pro-Quantity">
                                                    <div id="quantity">
                                                        <input type="text" value="1" />
                                                        <span class="dec qtybtn"> - </span>
                                                        <span class="inc qtybtn"> + </span>
                                                    </div>
                                                </td>
                                                <td class="Pro-Total">
                                                    <span id="money">$100.00</span>
                                                </td>
                                                <td class="Pro-Remove">
                                                    <a>
                                                        <img src="../../assets/icons/Remove.svg" />
                                                    </a>
                                                </td> *@
                                            </tr>
                                        </tbody>

                                    </table>
                                </div>

                                <div class="Row"></div>

                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Retrieve cart items from localStorage
            const cartItems = JSON.parse(localStorage.getItem('cart'));

            console.log(cartItems)

            // Display cart items in the table
            const tbody = document.querySelector('tbody');

            if (cartItems) {
                cartItems.forEach(item => {
                    const row = document.createElement('tr');

                    const imageCell = document.createElement('td');
                    const productCell = document.createElement('td');
                    const priceCell = document.createElement('td');
                    const quantityCell = document.createElement('td');
                    const totalCell = document.createElement('td');
                    const removeCell = document.createElement('td');

                    // Add content to cells (you need to adjust this according to your cart item structure)
                    imageCell.innerHTML = `<img src="~/Shopping/assets/images/${item.imageUrl}" />`;
                    productCell.textContent = item.name;
                    priceCell.textContent = `$${item.price}`;

                    // Create the input field for quantity
                    const quantityInput = document.createElement('input');
                    quantityInput.type = 'number';
                    quantityInput.value = item.quantity; // Set the initial value to the quantity of the product
                    quantityInput.min = 1;
                    quantityInput.classList.add('quantity-input');

                    // Create the buttons for increasing and decreasing quantity
                    const decBtn = document.createElement('span');
                    decBtn.textContent = '-';
                    decBtn.classList.add('dec', 'qtybtn');
                    decBtn.style.cursor = "pointer";
                    decBtn.style.fontSize = "24px"; // Adjust the font size as needed

                    const incBtn = document.createElement('span');
                    incBtn.textContent = '+';
                    incBtn.classList.add('inc', 'qtybtn');
                    incBtn.style.cursor = "pointer";
                    incBtn.style.fontSize = "24px"; // Adjust the font size as needed

                    // quantityCell.innerHTML = `
                    //         <td class="Pro-Quantity">
                    //             <div id="quantity">
                    //                 <input type="text" value="1" />
                    //                 <span style="transform: scale(3); cursor:pointer;" class="dec qtybtn"> - </span>
                    //                  <span style="transform: scale(3); cursor:pointer;" class="inc qtybtn"> + </span>
                    //             </div>
                    //         </td>
                    // `;

                    const quantityWrapper = document.createElement('div');
                    quantityWrapper.id = 'quantity';
                    quantityWrapper.appendChild(decBtn);
                    quantityWrapper.appendChild(quantityInput);
                    quantityWrapper.appendChild(incBtn);

                    quantityCell.appendChild(quantityWrapper);

                    totalCell.textContent = `$${item.price * item.quantity}`;
                    removeCell.innerHTML = `<a href="#" class="remove-item">Remove</a>`;

                    removeCell.querySelector('.remove-item').addEventListener('click', () => {
                        const index = cartItems.findIndex(cartItem => cartItem.id === item.id);

                        if (index !== -1) {
                            cartItems.splice(index, 1);

                            // Update the cart in localStorage
                            localStorage.setItem('cart', JSON.stringify(cartItems));

                            // Remove the row from the table
                            row.remove();

                            // Update the total count and any other relevant UI
                            updateTotalCount();
                        }
                    });

                    // Append cells to the row
                    row.appendChild(imageCell);
                    row.appendChild(productCell);
                    row.appendChild(priceCell);
                    row.appendChild(quantityCell);
                    row.appendChild(totalCell);
                    row.appendChild(removeCell);

                    // Event listeners for quantity buttons
                    // const incBtn = quantityCell.querySelector('.inc');
                    // const decBtn = quantityCell.querySelector('.dec');
                    // const quantityInput = quantityCell.querySelector('input');

                    // Event listener for increment button
                    incBtn.addEventListener('click', () => {
                        // Increase the quantity value
                        quantityInput.value = parseInt(quantityInput.value) + 1;
                        updateTotal();

                        // Update the quantity in localStorage
                        updateQuantity(item.id, parseInt(quantityInput.value));
                    });

                    // Event listener for decrement button
                    decBtn.addEventListener('click', () => {
                        // Decrease the quantity value, ensuring it doesn't go below 1
                        const newValue = Math.max(parseInt(quantityInput.value) - 1, 1);
                        quantityInput.value = newValue;
                        updateTotal();

                        // Update the quantity in localStorage
                        updateQuantity(item.id, newValue);
                    });

                    quantityInput.addEventListener('input', () => {
                        updateTotal();
                    });

                    function updateTotal() {
                        const quantity = parseInt(quantityInput.value) || 0;
                        totalCell.textContent = `$${item.price * quantity}`;
                    }


                    // Append the row to the table body
                    tbody.appendChild(row);
                });
            }

            // if (cartItems && cartItems.length > 0) { 
            //     const h1 = document.createElement('h1');

            //     h1.textContent = "Your Cart Is Currently Empty";

            //     tbody.append(h1);
            // }
        });

        function updateQuantity(productId, newQuantity) {
            const cartItems = JSON.parse(localStorage.getItem('cart'));
            const updatedItems = cartItems.map(item => {
                if (item.id === productId) {
                    item.quantity = newQuantity;
                    item.total = item.price * newQuantity; // Recalculate total
                }
                return item;
            });
            localStorage.setItem('cart', JSON.stringify(updatedItems));
        }
    </script>

</body>
</html>