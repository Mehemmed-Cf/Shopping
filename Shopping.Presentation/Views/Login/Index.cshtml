@using Shopping.Application.Modules.AccountModule.Commands.SigninCommand;
@model SigninRequest


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>

</head>
<body>

    <section class="Login-Section">
        <div class="container">
            <div class="Login-Row">
                <div class="CustomerLoginInfo">
                    <form id="customer_login" method="post" asp-controller="Account" asp-action="Signin">
                        <h2>Login</h2>
                        <div id="Login-Form-Container">
                            <div id="customerEmail">
                                <input id="customerEmail" type="email" name="UserName" placeholder="Email" autocapitalize="off" autocorrect="off" />
                                <p class="Email-Error-Message"></p>
                            </div>
                            <div id="customerPassword">
                                <input id="customerPassword" type="password" name="Password" placeholder="Password" autocapitalize="off" autocorrect="off" />
                                <p class="Password-Error-Message"></p>
                            </div>
                        </div>
                        <div class="Button-Box">
                            <div class="login-toggle">
                                <button class="Sign-In" type="submit">Sign In</button>
                                <a id="RecoverPassword">Forgot your password?</a>
                            </div>

                            <div class="create-account-link">
                                <a href="https://localhost:7297/Signup" class="CreateAccount-Link">Create Account</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script>
        @if (TempData["LogInError"] != null)
        {
            <text>
                Toastify({
                    text: '@TempData["LogInError"]',
                    duration: 5000,
                    close: true,
                    gravity: 'top',
                    position: 'right',
                    backgroundColor: 'linear-gradient(to right, #00b09b, #96c93d)',
                }).showToast();
            </text>

            TempData.Remove("LogInError");
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const form = document.getElementById('customer_login');

            form.addEventListener('submit', async function (event) {
                const email = document.querySelector('input[name="Email"]');
                const password = document.querySelector('input[name="Password"]');

                let errorMessage = '';
                const allFieldsEmpty = !email.value.trim() && !password.value.trim();

                if (allFieldsEmpty) {
                    errorMessage = 'Are you trying to play smart on me? you think I am not smart enaugh to add validations?.\n';
                } else {
                    if (!email.value.trim()) {
                        errorMessage += 'Email is required.\n';
                    }
                    if (!password.value.trim()) {
                        errorMessage += 'Password is required.\n';
                    }
                }

                if (email.value.trim()) {
                    try {
                        const response = await fetch('https://localhost:7297/Admin/users', {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        console.log(response);

                        if (response.ok) {
                            const contentType = response.headers.get('content-type');
                            if (contentType && contentType.indexOf('application/json') !== -1) {
                                const users = await response.json();

                                connsole.log(users);

                                const emailExists = users.some(user => user.email === email.value.trim());

                                console.log(emailExists);

                                if (!emailExists) {
                                    errorMessage += 'This email does not exist.\n';
                                }
                            } else {
                                errorMessage += 'Unexpected response format. Please try again later.\n';
                            }
                        } else {
                            errorMessage += 'Error checking email availability. Please try again later.\n';
                        }
                    } catch (error) {
                        errorMessage += 'Error checking email availability. Please try again later.\n';
                    }
                }

                if (errorMessage) {
                    alert(errorMessage.trim());
                    event.preventDefault();
                }

            });
        });
    </script>

</body>
</html>