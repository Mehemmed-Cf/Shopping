@using Shopping.Application.Modules.AccountModule.Commands.SignUpCommand;
@model SignUpRequest

@{
    ViewData["Title"] = "Sign Up";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup</title>

    <style>
        #customerFirstName {
            display: flex;
            align-items: center;
            flex-direction: row;
            margin: auto;
            width: 400px;
            position: relative;
            background-color: var(--White);
            padding-bottom: 30px;
        }

        #customerFirstName input {
            width: 545px;
            height: 48px;
            padding: 16px 20px 16px 20px;
            gap: 12px;
            border-radius: 20px;
            background-color: var(--BackGround);
            border-radius: 5px;
            border: 1px solid white;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
        }

        #customerLastName {
            display: flex;
            align-items: center;
            flex-direction: row;
            margin: auto;
            width: 400px;
            position: relative;
            background-color: var(--White);
            padding-bottom: 30px;
        }

        #customerLastName input {
            width: 545px;
            height: 48px;
            padding: 16px 20px 16px 20px;
            gap: 12px;
            border-radius: 20px;
            background-color: var(--BackGround);
            border-radius: 5px;
            border: 1px solid white;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
        }

        #customerEmail {
            display: flex;
            align-items: center;
            flex-direction: row;
            margin: auto;
            width: 400px;
            position: relative;
            background-color: var(--White);
            padding-bottom: 30px;
        }

        #customerEmail input {
            width: 545px;
            height: 48px;
            padding: 16px 20px 16px 20px;
            gap: 12px;
            border-radius: 20px;
            background-color: var(--BackGround);
            border-radius: 5px;
            border: 1px solid white;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
        }

        #customerPassword {
            display: flex;
            align-items: center;
            flex-direction: row;
            margin: auto;
            width: 400px;
            position: relative;
            background-color: var(--White);
        }

        #customerPassword input {
            width: 545px;
            height: 48px;
            padding: 16px 20px 16px 20px;
            gap: 12px;
            border-radius: 20px;
            background-color: var(--BackGround);
            border-radius: 5px;
            border: 1px solid white;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
        }
    
        .Signup-Section {
            display: block;
            padding-bottom: 50px;
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
        }

        .Signup-Section .container .Signup-Row {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: row;
            margin-right: -15px;
            margin-left: -15px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo {
            display: flex;
            flex-direction: column;
            justify-content: center;
            border: 1px solid whitesmoke;
            box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
            width: 470px;
            margin-top: 100px;
            height: 450px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo h2 {
            font-family: sans-serif;
            font-size: 30px;
            font-weight: 600;
            line-height: 120%;
            font-style: normal;
            letter-spacing: normal;
            text-transform: capitalize;
            color: var(--Font-Color);
            padding-left: 35px;
            margin-bottom: 20px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo #customer-login {
            margin-bottom: 0px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo #customer-login #Signup-Form-Container {
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid #ebebeb;
            padding: 20px 30px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box {
            display: flex;
            flex-direction: column;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .login-toggle {
            display: flex;
            flex-direction: row;
            gap: 20px;
            padding: 20px 10px 0px 33px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .login-toggle a {
            font-family: sans-serif;
            font-size: 14px;
            font-weight: 400;
            line-height: 40px;
            font-style: normal;
            letter-spacing: normal;
            text-transform: capitalize;
            text-decoration: none;
            color: #333333;
            transition: 0.3s;
            will-change: transform;
            outline: medium none;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .login-toggle a:hover {
            transform: scale(1.03);
            color: var(--Main-Blue);
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .create-account-link {
            display: flex;
            flex-direction: row;
            gap: 20px;
            overflow: hidden;
            padding-left: 33px;
            margin-bottom: 10px;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .create-account-link a {
            font-family: sans-serif;
            font-size: 14px;
            font-weight: 400;
            line-height: 40px;
            font-style: normal;
            letter-spacing: normal;
            text-transform: capitalize;
            text-decoration: none;
            color: #333333;
            transition: 0.3s;
            will-change: transform;
            outline: medium none;
        }

        .Signup-Section .container .Signup-Row .CustomerSignupInfo .Button-Box .create-account-link a:hover {
            transform: scale(1.03);
            color: var(--Main-Blue);
        }
        
    </style>

</head>
<body>

    <section class="Signup-Section">
        <div class="container">
            <div class="Signup-Row">
                <div class="CustomerSignupInfo">
                    <form id="customer_login" method="post" asp-controller="Account" asp-action="Signup">
                        <h2>SignUp</h2>
                        <div id="Signup-Form-Container">

                            @*id="customerEmail"*@

                            <div id="customerFirstName">
                                <input type="text" name="FirstName" placeholder="FirstName" autocapitalize="off" autocorrect="off" />
                            </div>

                            @*id="customerEmail"*@

                            <div id="customerLastName">
                                <input type="text" name="LastName" placeholder="LastName" autocapitalize="off" autocorrect="off" />
                            </div>

                            <div id="customerEmail">
                                <input id="customerEmail" type="email" name="Email" placeholder="Email" autocapitalize="off" autocorrect="off" />
                                <p class="Email-Error-Message"></p>
                            </div>

                            <div id="customerPassword">
                                <input id="customerPassword" type="password" name="Password" placeholder="Password" autocapitalize="off" autocorrect="off" />
                                <p class="Password-Error-Message"></p>
                            </div>

                        </div>
                        <div class="Button-Box">
                            <div class="login-toggle">
                                <button class="Sign-In" type="submit">Sign Up</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('customer_login');
            const passwordLengthErrorMessage = "Password must be at least 6 characters long.";
            const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

            form.addEventListener('submit', async function(event) {
                const firstName = document.querySelector('input[name="FirstName"]');
                const lastName = document.querySelector('input[name="LastName"]');
                const email = document.querySelector('input[name="Email"]');
                const password = document.querySelector('input[name="Password"]');

                let errorMessage = '';
                const allFieldsEmpty = !firstName.value.trim() && !lastName.value.trim() && !email.value.trim() && !password.value.trim();

                if (allFieldsEmpty) {
                    errorMessage = 'Are you trying to play smart on me? you think I am not smart enaugh to add validations?.\n';
                } else {
                    if (!firstName.value.trim()) {
                        errorMessage += 'First Name is required.\n';
                    }
                    if (!lastName.value.trim()) {
                        errorMessage += 'Last Name is required.\n';
                    }
                    if (!email.value.trim()) {
                        errorMessage += 'Email is required.\n';
                    }else {
                        if (!/@@/.test(email.value)) {
                            errorMessage += 'Email should contain an @@ symbol.\n';
                        } else if (email.value.includes(" ")) {
                            errorMessage += 'Email cannot contain spaces.\n';
                        } else if (!emailPattern.test(email.value)) {
                            errorMessage += 'Email format is invalid.\n';
                        }
                    }
                    if (!password.value.trim()) {
                        errorMessage += 'Password is required.\n';
                    } else if (password.value.length < 6) {
                        errorMessage += passwordLengthErrorMessage + '\n'; 
                    }
                }

                if (email.value.trim()) {
                    try {
                        const response = await fetch('https://localhost:7297/Admin/users', {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (response.ok) {
                            const contentType = response.headers.get('content-type');
                            if (contentType && contentType.indexOf('application/json') !== -1) {
                                const users = await response.json();
                                const emailExists = users.some(user => user.email === email.value.trim());

                                if (emailExists) {
                                    errorMessage += 'This email is already registered.\n';
                                }
                            } else {
                                errorMessage += 'Unexpected response format. Please try again later.\n';
                            }
                        } else {
                            errorMessage += 'Error checking email availability. Please try again later.\n';
                        }
                    } catch (error) {
                        errorMessage += 'Error checking email availability. Please try again later.\n';
                    }
                }

                // if (errorMessage) {
                //     alert(errorMessage.trim());
                //     event.preventDefault(); 
                // }

                if(errorMessage) {
                    Toastify({
                        text: errorMessage.trim(),
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                        stopOnFocus: true,
                    }).showToast();

                    event.preventDefault();
                }
            });
        });
    </script>

</body>
</html>